-- Let’s create a new table named accounts for the demonstration:
DROP TABLE IF EXISTS accounts;

CREATE TABLE accounts (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(100) NOT NULL,
    balance DEC(15,2) NOT NULL,
    PRIMARY KEY(id)
);

-- When you execute the following INSERT statement:
INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

-- For example, the following statements start a new transaction and insert a new account into the accounts table:
BEGIN;

INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

SELECT 
    id,
    name,
    balance
FROM 
    accounts;
   
-- The following COMMIT statement inserts Alice’s account to the accounts table:
COMMIT;

-- Put it all together.
-- start a transaction
BEGIN;

-- insert a new row into the accounts table
INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

-- commit the change (or roll it back later)
COMMIT;

-- In the first session, start a new transaction:
BEGIN;

-- and subtracting 1000USD from Bob’s account with id 1:
UPDATE accounts 
SET balance = balance - 1000
WHERE id = 1;

-- In the second session, check the account balance of both accounts:
SELECT 
    id,
    name,
    balance
FROM 
    accounts;
   
UPDATE accounts
SET balance = balance + 1000
WHERE id = 2; 

COMMIT;

SELECT 
    id,
    name,
    balance
FROM 
    accounts;
   
-- Put it all together.
-- start a transaction
BEGIN;

-- deduct 1000 from account 1
UPDATE accounts 
SET balance = balance - 1000
WHERE id = 1;

-- add 1000 to account 2
UPDATE accounts
SET balance = balance + 1000
WHERE id = 2; 

-- select the data from accounts
SELECT id, name, balance
FROM accounts;

-- commit the transaction
COMMIT;

-- begin the transaction
BEGIN;

-- deduct the amount from the account 1
UPDATE accounts 
SET balance = balance - 1500
WHERE id = 1;

-- add the amount from the account 3 (instead of 2)
UPDATE accounts
SET balance = balance + 1500
WHERE id = 3; 

-- roll back the transaction
ROLLBACK;
